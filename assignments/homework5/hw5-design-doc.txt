CS122 Assignment 5 - Advanced Subqueries - Design Document
==========================================================

A:  Logistics
-------------

A1.  List your team name and the people who worked on this assignment.

     sqLIT

     Advith Chelikani
     Joon Lee
     Charlie Tong

A2.  Specify the repository URL, tag name and commit-hash of the Git version
     you are submitting for your assignment.  (You can list the commit hashes
     of your repository tags with this command:  git show-ref --tags)

     Repository URL:  https://github.com/AChelikani/CS122
     Tag name:        <tag>
     Commit hash:     <hash>

A3.  Specify any late tokens you are applying to this assignment, or
     "none" if no late tokens.

A4.  Briefly describe what parts of the assignment each teammate focused on.

    Advith: Subquery Planning
    Joon: Correlated Evaluation
    Charlie: Decorrelation

B:  Subquery Planning
---------------------

B1.  Which planner did your team add subquery planning to?  How easy or
     difficult was it to incorporate subquery-planning into the planner?

     Our team added the subquery planning to the cost based planner. It was fairly
     straight forward to add the subquery planner.

B2.  Briefly outline the process by which you perform subquery planning in
     your query planner.  Also explain briefly how your subquery-planner works.

     We scan the select, where, and having clauses. In the select clause, we
     check each select value for whether it is an instance of scalar subquery. If
     it is, we call make plan on the subquery and add it to the plan tree. We then
     check the where and having clauses for all three cases of subquery, compiling
     all the instances into a list. We then iterate through this list, calling
     makePlan on each subquery and adding them to the plan tree.

B3.  Briefly describe how you detect whether there are subqueries in the
     GROUP BY and ORDER BY clauses.  How do you make sure this doesn't
     interfere with subqueries in other clauses?

     We detect subqueries in the group by and order by clauses by retrieving the
     clauses in lists using the get methods in SelectClause and then looping
     through the expressions present and checking if any are an instance of the
     subquery operator. Since we are strictly retrieving the group by and order by
     clauses, this inherently cannot be affecting subqueries in other clauses of
     the query.

C:  Correlated Evaluation
-------------------------

C1.  How easy or difficult was it to incorporate support for correlated
     evaluation into your query planner?  Did it affect the sequence of
     steps in any substantial ways?

     It was easy to incorporate support for correlated evaluation
     into our query planner. It did not affect the sequence of steps
     significantly, as all we had to do was to check for subqueries
     in the WHERE, HAVING, and SELECT clauses after we created plan
     nodes corresponding to these clauses, and setting the parent
     environment of those subqueries appropriately.

D:  Decorrelating Queries
-------------------------

D1.  Which example query decorrelation did your team choose to implement?
     Why did you choose this query?

     [NOT] IN / EXISTS (SELECT ...)

     The query is simple to decorrelate, and the implementation for the two are
     pretty similar. We also wanted to see SEMIJOIN used in optimization.

D2.  How does your planner determine whether a query follows the pattern
     that your planner can decorrelate?  How does it identify the components
     of the query in order to decorrelate it?

     It uses instanceof to check that the expression is of the correct type. We
     also check that the inner subquery reads from a BASE_TABLE, since we need
     an alias for the subquery when decorrelating, and it is simpler to just
     use the table name. We extract the WHERE predicate in the subquery
     whenever possible; if it is absent then it's equivalent to null.

     The subquery is always in the WHERE clause, so if the WHERE clause matches
     the type (InSubqueryOperator or ExistsOperator) then we can process it.
     The other parts are just extracted from the WHERE clause and the SELECT
     clause. For the IN case, we extract the IN expr (ex. for a IN (...), we
     need a comparison between a = t2.b). We also extract the first column of
     the subquery schema (ex. t2.b) so that we can construct an equality
     comparison. This is then combined with the WHERE predicate in the subquery
     using a BooleanOperator AND_EXPR.

D3.  Briefly outline the process by which your planner decorrelates the query.
     How does it modify the subquery, and how does it modify the enclosing
     query?

     After verifying that the query is in fact able to be decorrelated, we
     extract the components as specified in D2 and construct a new FROM clause
     for the outer SELECT. This then replaces the original FROM clause. The
     original WHERE clause is also replaced by null.

     While constructing the FROM clause, we take care to set predicates to null
     after extracting them (i.e. in the subquery), so that the result is in
     fact decorrelated.

     Thus, the subquery has its predicate removed before being put in the
     SEMIJOIN/ANTIJOIN. The enclosing query has its WHERE expr (where the
     subquery used to be) set to null also. The enclosing query's FROM clause
     is also obviously replaced by the newly constructed decorrelated clause.

E:  Extra Credit [OPTIONAL]
---------------------------

If you implemented any extra-credit tasks for this assignment, describe
them here.  The description should be like this, with stuff in "<>" replaced.
(The value i starts at 1 and increments...)

E1:  Use CostBasedJoinPlanner in implementation of everything.

     All subquery operations, correlated evaluation, and decorrelation works in
     the CostBasedJoinPlanner.

     All tests pass.

E2:  Implement decorrelation for IN, EXISTS, NOT IN, and NOT EXISTS.

     For NOT IN and NOT EXISTS, extract the inner subquery from the
     BooleanOperator and parse it the same as before. Use an ANTIJOIN instead
     of a SEMIJOIN.

     All tests pass. EXPLAIN shows the decorrelated execution plan.

F:  Feedback [OPTIONAL]
-----------------------

WE NEED YOUR FEEDBACK!  Thoughtful and constructive input will help us to
improve future versions of the course.  These questions are OPTIONAL, and
they obviously won't affect your grade in any way (including if you hate
everything about the assignment and databases in general, or Donnie and/or
the TAs in particular).  Feel free to answer as many or as few of them as
you wish.

NOTE:  If you wish to give anonymous feedback, a similar survey will be
       made available on the Moodle.

F1.  How many hours total did your team spend on this assignment?
     (That is, the sum of each teammate's time spent on the assignment.)

F2.  What parts of the assignment were most time-consuming?  Why?

F3.  Did you find any parts of the assignment particularly instructive?
     Correspondingly, did any parts feel like unnecessary busy-work?

F4.  Did you particularly enjoy any parts of the assignment?  Were there
     any parts that you particularly disliked?

F5.  Do you have any suggestions for how future versions of the
     assignment can be improved?
