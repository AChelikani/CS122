CS122 Assignment 1 - NanoDB Set-Up and Storage Layer - Design Document
======================================================================

A:  Logistics
-------------

A1.  List your team name and the people who worked on this assignment.

     Make Databases Great Again

     Advith Chelikani
     Joon Lee
     Charlie Tong

A2.  Specify the repository URL, tag name and commit-hash of the Git version
     you are submitting for your assignment.  (You can list the commit hashes
     of your repository tags with this command:  git show-ref --tags)

     Repository URL:  https://github.com/AChelikani/CS122
     Tag name:        <tag>
     Commit hash:     <hash>

A3.  Specify any late tokens you are applying to this assignment, or
     "none" if no late tokens.

     None

A4.  Briefly describe what parts of the assignment each teammate focused on.

     Advith: Set-up, deleting tuples, updating tuples
     Joon: Buffer management
     Charlie:

B:  Deleting and Updating Tuples
--------------------------------

B1.  Briefly describe (1-3 sentences) how you reclaim slot entries in
     the slotted page.  Which slot entries are you able to reclaim?

     Slot entries are reclaimed by checking for consecutive empty slots starting
     from the last slot and working backwards. This chain of consecutive empty
     slots starting from the last slot can be reclaimed. The reclaiming is done
     by resetting the number of slots on the page to the appropriate value.

B2.  Briefly outline the steps of what your setNullColumnValue() function
     does.  You don't have to go into much detail; we can look at your
     code for the details.  Just describe the basic things the function
     must do to set a column-value to NULL.

     We must do the following to set a column-value to NULL: if the column is
     not null we 1) set its flag to null 2) delete all tuple data in the range
     of the column 3) update the page offset by what we just deleted 4) recompute
     the column offsets.

B3.  Similarly, briefly outline the steps of what your
     setNonNullColumnValue() function does.

     Here we first determine if the column is a varchar column, in which case we
     compute the space it takes up. Then if the column is null, we set its null
     flag to false and find the first proceeding column that is not null and set
     aside space there for our tuple. If the column is not null we only need to
     distinguish between varchar because of the variable amount of space. We
     assign space appropriately and then we write the tuple.

C:  Unpinning Tuples and Pages
------------------------------

C1.  Briefly describe your strategy for determining when tuples need to
     be unpinned.  Make sure to comment on plan-nodes and commands.

     Our strategy was to unpin tuples when they were no longer being used
     by the database, i.e. when the tuple objects were no longer referenced
     by the program during the command. Thus, tuples were unpinned after
     the plan-nodes executed commands on them. Also, the select plan-node
     unpinned tuples when they did not satisfy the selection predicate.

C2.  In general, you only need to worry about unpinning tuples because
     the backing page will also be unpinned.  However, there are some
     situations when DBPages themselves must be unpinned directly.
     Describe any situations where you unpin pages directly in your
     implementation, and why you do so.  (Make sure to answer this
     question in the context of your insert-optimization changes.)

     In HeapTupleFile methods, many methods iterate over multiple pages in the
     file to perform an action. In this case, a page needs to be unpinned directly
     if it is no longer needed. For example, in addTuple(), we traverse over the
     linked list of free pages, and if a page is loaded but not needed, it must
     be unpinned afterwards. Similarly, in deleteTuple(), we unpin each page after
     it is used. Pages are unpinned directly because they are referenced without
     referencing tuples.

     In HeapTupleFileManager, we also unpin pages directly. In openTupleFile(), we
     unpin the page because creating the tuple object will pin it again. In
     saveMetadata(), we also unpin pages directly because we do not reference tuples
     in the method.

D:  NanoDB Storage Performance
------------------------------

D1.  In 3-6 sentences, describe your general approach for improving the
     performance of inserts, including what general file-level structuring
     you use of blocks.

     We store "free" blocks in a linked-list format anchored at the header file.
     Each block in the list contains an index to the next block in the list.
     This value is stored as an integer in the last 4 bytes of the page for
     DataPages, and is stored in bytes 6-10 for the HeaderPage. This reduces
     the number of pages read for each insert down to constant time on average.

D2.  Does your file-level organization have the potential to increase the
     number of large disk seeks when performing inserts?  What steps do
     you take, if any, to reduce the number of disk seeks?

     No, the changes should always decrease the number of disk seeks compared
     to the default implementation. Each insert should take on average 2 page
     reads: the header and the next free page.

     The only time it will take more than 2 is when the next free page does not
     have enough space for the new tuple. Then, the page is removed from the
     linked-list, which occurs once per page and does not scale with the number
     of inserted tuples (hence not included in the average page reads). This
     greatly reduces the number of disk reads, although distance travelled
     will be approximately the same.

D3.  What steps must be taken during a tuple-delete operation to update
     your file-level structures?  How many pages must be written to?

     The page is considered "free" and thus inserted into the linked-list if it
     is not already present. This requires 2 page writes (the newly freed page
     and also the page that comes before it in the linked-list). Traversing
     the linked-list is O(N) reads in the worst case.

D4.  What steps must be taken after a tuple-insert operation that fills
     the data page?

     The page is marked as "full" and removed from the linked-list. This
     consists of two page writes (the full page is marked as full and removed,
     and the page before it in the linked-list now points to the next node).

     In our implementation, these steps occur at the next insert
     operation, rather than after the insert that fills the page.

D5.  Describe your criteria for when a page is considered to be "full."

     The only time pages are marked "full" is during an insert operation with
     a tuple that does not fit, rather than after an insert that fills the page.

     We chose this implementation because it is simpler. We do not need to set 
     arbitrary or inefficient limits for the criteria of "full" pages. For
     example, if we choose the maximum size of new tuples as the limit, a lot of
     space can be wasted. Any other limit would not guarantee that the next
     tuple could be inserted anyway, so we may as well delay the decision until
     the next insert actually happens.

     Performance wise, there is potentially one additional read/write per page,
     but since this doesn't scale with the number of tuples we don't care.

E:  Feedback [OPTIONAL]
-----------------------

WE NEED YOUR FEEDBACK!  Thoughtful and constructive input will help us to
improve future versions of the course.  These questions are OPTIONAL, and
they obviously won't affect your grade in any way (including if you hate
everything about the assignment and databases in general, or Donnie and/or
the TAs in particular).  Feel free to answer as many or as few of them as
you wish.

NOTE:  If you wish to give anonymous feedback, a similar survey will be
       made available on the Moodle.

E1.  How many hours total did your team spend on this assignment?
     (That is, the sum of each teammate's time spent on the assignment.)

E2.  What parts of the assignment were most time-consuming?  Why?

E3.  Did you find any parts of the assignment particularly instructive?
     Correspondingly, did any parts feel like unnecessary busy-work?

E4.  Did you particularly enjoy any parts of the assignment?  Were there
     any parts that you particularly disliked?

E5.  Do you have any suggestions for how future versions of the
     assignment can be improved?
