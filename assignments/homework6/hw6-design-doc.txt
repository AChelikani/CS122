CS122 Assignment 6 - B+ Tree Indexes - Design Document
======================================================

A:  Logistics
-------------

A1.  List your team name and the people who worked on this assignment.

     sqLIT

     Advith Chelikani
     Joon Lee
     Charlie Tong

A2.  Specify the repository URL, tag name and commit-hash of the Git version
     you are submitting for your assignment.  (You can list the commit hashes
     of your repository tags with this command:  git show-ref --tags)

     Repository URL:  <url>
     Tag name:        <tag>
     Commit hash:     <hash>

A3.  Specify any late tokens you are applying to this assignment, or
     "none" if no late tokens.

     None

A4.  Briefly describe what parts of the assignment each teammate focused on.

    Advith:
    Joon: Complete Missing B+ Tree Operations
    Charlie:

B:  Analysis of Implementation
------------------------------

Given NanoDB's B+ tree implementation, consider a simple schema where an
index is built against a single integer column:

     CREATE TABLE t (
         -- An index is automatically built on the id column by NanoDB.
         id INTEGER PRIMARY KEY,
         value VARCHAR(20)
     );

Answer the following questions.

B1.  What is the total size of the index's search-key for the primary-key
     index, in bytes?  Break down this size into its individual components;
     be as detailed as possible.  (You don't need to go lower than the
     byte-level in your answer, but you should show what each byte is a
     part of.)

     The search-key is simply the primary key ID, which is a 4 byte integer.

B2.  What is the maximum number of search-keys that can be stored in leaf
     nodes of NanoDB's B+ tree implementation?  You should assume a page-
     size of 8192 bytes.

     The tuples start on byte 5, and each takes up 4 bytes.
     Thus each page can store 2046 tuples.

B3.  What is the maximum number of keys that can be stored in inner nodes
     of this particular implementation?  (Recall that every key must have
     a page-pointer on either side of the key.)

     The pointers and keys start on byte 5. Pointers take 2 bytes and
     search keys take 4 bytes. N search keys takes 6 * N + 2 bytes.
     Thus each page can store 1364 keys.

B4.  In this implementation, leaf nodes do not reference the previous
     leaf, only the next leaf.  When splitting a leaf into two leaves,
     what is the maximum number of leaf nodes that must be read or written,
     in order to properly manage the next-leaf pointers?

     If leaves also contained a previous-leaf pointer, what would the
     answer be instead?

     Make sure to explain your answers.

     If the leaf nodes are A -> B -> C and we split B into (B -> B'), then
     we will need to modify:
       B' : set next leaf to C
       B  : set next leaf to B'

     We can get the pointer to C from B, so we only need to read/write to
     these two nodes total.

     When leaves also contain a previous-leaf pointer, then we will modify:
       B' : set next leaf to C and previous to B
       B  : set next leaf to B'
       C  : set previous to B'

     Thus we will need to modify three nodes total.

B5.  In this implementation, nodes do not store a page-pointer to their
     parent node.  This makes the update process somewhat complicated, as
     we must save the sequence of page-numbers we traverse as we navigate
     from root to leaf.  If a node must be split, or if entries are to be
     relocated from a node to its siblings, the node’s parent-node must
     be retrieved, and the parent’s contents must be scanned to determine
     the node’s sibling(s).

     Consider an alternate B+ tree implementation in which every node
     stores a page-pointer to the node’s parent.  In the case of splitting
     an inner node, what performance-related differences are there between
     this alternate representation and the given implementation, where
     nodes do not record their parents?  Which one would you recommend?
     Justify your answer.

     If inner nodes stored their parents, then splitting an inner node
     would require the children to update their parents to the new node.
     This would have a pretty significant performance hit, so we would
     recommend the given implementation.

B6.  It should be obvious how indexes can be used to enforce primary keys,
     but what role might they play with foreign keys?  For example, given
     this schema:

     CREATE TABLE t1 (
         id INTEGER PRIMARY KEY
     );

     CREATE TABLE t2 (
         id INTEGER REFERENCES t1;
     );

     Why might we want to build an index on t2.id?

     There could be foreign key constraints such as cascading deletes that
     would have better performance with an index on t2.id. Furthermore,
     we would expect many t2 actions to use this foreign key, so it makes
     sense to index it for improved performance (i.e. joins with t1).

E:  Extra Credit [OPTIONAL]
---------------------------

If you implemented any extra-credit tasks for this assignment, describe
them here.  The description should be like this, with stuff in "<>" replaced.
(The value i starts at 1 and increments...)

E<i>:  <one-line description>

     <brief summary of what you did, including the specific classes that
     we should look at for your implementation>

     <brief summary of test-cases that demonstrate/exercise your extra work>

F:  Feedback [OPTIONAL]
-----------------------

WE NEED YOUR FEEDBACK!  Thoughtful and constructive input will help us to
improve future versions of the course.  These questions are OPTIONAL, and
they obviously won't affect your grade in any way (including if you hate
everything about the assignment and databases in general, or Donnie and/or
the TAs in particular).  Feel free to answer as many or as few of them as
you wish.

NOTE:  If you wish to give anonymous feedback, a similar survey will be
       made available on the Moodle.

F1.  How many hours total did your team spend on this assignment?
     (That is, the sum of each teammate's time spent on the assignment.)

F2.  What parts of the assignment were most time-consuming?  Why?

F3.  Did you find any parts of the assignment particularly instructive?
     Correspondingly, did any parts feel like unnecessary busy-work?

F4.  Did you particularly enjoy any parts of the assignment?  Were there
     any parts that you particularly disliked?

F5.  Do you have any suggestions for how future versions of the
     assignment can be improved?

